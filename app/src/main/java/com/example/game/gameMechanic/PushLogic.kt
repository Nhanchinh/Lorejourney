package com.example.game.gameMechanic

import com.example.game.GameMap
import com.example.game.map.TileConstants

/**
 * Qu·∫£n l√Ω logic ƒë·∫©y ƒë√° trong game puzzle
 */
class PushLogic(private val gameMap: GameMap) {

    // Track v·ªã tr√≠ c√°c target g·ªëc (ƒë·ªÉ restore khi ƒë√° r·ªùi kh·ªèi target)
    private val originalTargets = mutableSetOf<Pair<Int, Int>>()

    init {
        // Scan map ƒë·ªÉ t√¨m t·∫•t c·∫£ targets
        scanOriginalTargets()
        println("üéØ Found ${originalTargets.size} targets in map")
    }

    private fun scanOriginalTargets() {
        for (y in 0 until gameMap.height) {
            for (x in 0 until gameMap.width) {
                val activeTile = gameMap.getTile(x, y, 2) // Check active layer
                val mainTile = gameMap.getTile(x, y, 1) // Check main layer
                
                if (TileConstants.isTarget(activeTile) || TileConstants.isTarget(mainTile)) {
                    originalTargets.add(Pair(x, y))
                    println("üéØ Target found at ($x, $y) - active: $activeTile, main: $mainTile")
                }
            }
        }
    }

    /**
     * Th·ª±c hi·ªán ƒë·∫©y ƒë√° n·∫øu c√≥ th·ªÉ
     * @return true n·∫øu push th√†nh c√¥ng, false n·∫øu kh√¥ng th·ªÉ push
     */
    fun tryPush(playerTileX: Int, playerTileY: Int, dx: Int, dy: Int): Boolean {
        print("üîÑ Trying to push stone from ($playerTileX, $playerTileY) to (${playerTileX + dx}, ${playerTileY + dy})")
        val stoneTileX = playerTileX + dx
        val stoneTileY = playerTileY + dy
        val pushToX = stoneTileX + dx
        val pushToY = stoneTileY + dy

        // Check xem c√≥ ƒë√° ƒë·ªÉ ƒë·∫©y kh√¥ng (tr√™n active layer)
        val stoneTile = gameMap.getTile(stoneTileX, stoneTileY, 2)
        if (!TileConstants.isPushable(stoneTile)) {
            return false // Kh√¥ng c√≥ ƒë√° ƒë·ªÉ ƒë·∫©y
        }

        // Check xem v·ªã tr√≠ ƒë·∫©y ƒë·∫øn c√≥ h·ª£p l·ªá kh√¥ng (check c·∫£ main v√† active layer)
        val mainDestinationTile = gameMap.getTile(pushToX, pushToY, 1) // Main layer
        val activeDestinationTile = gameMap.getTile(pushToX, pushToY, 2) // Active layer
        if (!canPushTo(mainDestinationTile, activeDestinationTile)) {
            println("‚ùå Cannot push stone to ($pushToX, $pushToY) - main: $mainDestinationTile, active: $activeDestinationTile")
            return false // Kh√¥ng th·ªÉ ƒë·∫©y ƒë·∫øn v·ªã tr√≠ n√†y
        }

        // Th·ª±c hi·ªán ƒë·∫©y
        performPush(stoneTileX, stoneTileY, pushToX, pushToY)
        println("üîÑ Pushed stone from ($stoneTileX, $stoneTileY) to ($pushToX, $pushToY) on active layer")
        return true
    }

    private fun canPushTo(mainTileId: Int, activeTileId: Int): Boolean {
        // Main layer ph·∫£i walkable (s·ª≠ d·ª•ng TileConstants.isWalkable)
        val mainWalkable = TileConstants.isWalkable(mainTileId)
        
        // Active layer ph·∫£i empty ho·∫∑c target
        val activeValid = when (activeTileId) {
            TileConstants.TILE_EMPTY,
            TileConstants.TILE_TARGET -> true
            else -> false
        }
        
        println("üîç canPushTo check - main: $mainTileId (walkable: $mainWalkable), active: $activeTileId (valid: $activeValid)")
        return mainWalkable && activeValid
    }

    private fun performPush(fromX: Int, fromY: Int, toX: Int, toY: Int) {
        val destinationActiveTile = gameMap.getTile(toX, toY, 2) // Active layer
        val destinationMainTile = gameMap.getTile(toX, toY, 1) // Main layer
        val originalStoneTile = gameMap.getTile(fromX, fromY, 2) // L·∫•y lo·∫°i ƒë√° g·ªëc

        // Update destination tile on active layer
        val newDestinationTile = when {
            TileConstants.isTarget(destinationActiveTile) || TileConstants.isTarget(destinationMainTile) -> {
                println("‚úÖ Stone pushed onto target at ($toX, $toY)")
                TileConstants.TILE_STONE_ON_TARGET
            }
            else -> originalStoneTile // Gi·ªØ nguy√™n lo·∫°i ƒë√° g·ªëc (42, 55, 152, etc.)
        }
        gameMap.setTile(toX, toY, newDestinationTile, 2) // Set on active layer

        // Update source tile on active layer - check what should be restored
        val sourceMainTile = gameMap.getTile(fromX, fromY, 1) // Check main layer at source
        val newSourceTile = when {
            originalTargets.contains(Pair(fromX, fromY)) -> {
                // C√≥ original target ·ªü v·ªã tr√≠ n√†y
                if (TileConstants.isTarget(sourceMainTile)) {
                    // N·∫øu main layer c√≥ target, th√¨ active layer ƒë·ªÉ empty
                    println("üéØ Target on main layer at ($fromX, $fromY), setting active layer to empty")
                    TileConstants.TILE_EMPTY
                } else {
                    // Target ch·ªâ c√≥ tr√™n active layer, restore l·∫°i
                    println("üéØ Restored target at ($fromX, $fromY) on active layer")
                    TileConstants.TILE_TARGET
                }
            }
            else -> {
                // Kh√¥ng c√≥ original target, set empty
                TileConstants.TILE_EMPTY
            }
        }
        gameMap.setTile(fromX, fromY, newSourceTile, 2) // Set on active layer
    }

    /**
     * Check xem ƒë√£ ho√†n th√†nh puzzle ch∆∞a
     */
    fun isPuzzleComplete(): Boolean {
        // Ki·ªÉm tra t·∫•t c·∫£ original targets ƒë·ªÅu c√≥ ƒë√°
        val completed = originalTargets.all { (x, y) ->
            val activeTile = gameMap.getTile(x, y, 2)
            activeTile == TileConstants.TILE_STONE_ON_TARGET
        }

        if (completed) {
            println("üéâ PUZZLE COMPLETED! All stones on targets!")
        }

        return completed
    }

    /**
     * Get s·ªë l∆∞·ª£ng targets v√† stones completed
     */
    fun getProgress(): Pair<Int, Int> {
        val totalTargets = originalTargets.size
        val completedTargets = originalTargets.count { (x, y) ->
            val activeTile = gameMap.getTile(x, y, 2)
            activeTile == TileConstants.TILE_STONE_ON_TARGET
        }
        return Pair(completedTargets, totalTargets)
    }
}